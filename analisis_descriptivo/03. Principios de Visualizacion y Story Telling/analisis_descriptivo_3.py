# -*- coding: utf-8 -*-
"""analisis_descriptivo_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WfHQE8ROVgTypzs3loic4leB_Y1hGc1k
"""

# Commented out IPython magic to ensure Python compatibility.
# Importo las librerias que usare en este notebook
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('classic')
# %matplotlib inline
import seaborn as sns
sns.set()

"""# Tarea parte 1:
Revisa el siguiente codigo, familiarizate con las graficas de seaborn y que significa cada una. Pasa a la parte dos y contesta las preguntas.

### Objetivo
Este script tiene como objetivo que te familiarices con los conceptos basicos de las graficas mas usadas, como leerlas e implementarlas en seaborn. Te recomiendo leer con detenimiento y jugar un poco con las opciones que te otorga seaborn.

### Indicaciones generales:
Este notebook tiene como objetivo ensenarte algunos ejemplos de como graficar usando seaborn. A su vez presentamos una breve explicacion de cada tipo de grafica, y un link a su documentacion. Si desaeas ampliar tu conocimiento sobre este tipo de graficos te invitamos a revisar el link de teoria, y si deseas jugar con seaborn pasa a revisar la documentacion.

A lo largo de las explicaciones puede que te encuentres con conceptos que aun no te son familiares como lo son los intervalos de confianza y distribuciones normales. No te preocupes, estos temas seran aclarados conforme avances en el curso o en la maestria.

Nota: Los acentos fueron omitidos para evitar problemas de encoding o compatibilidad. Es una buena practica!

### Recomendaciones
Cuando tengas dudas de como funciona una libreria te recomiendo ir a google y buscar su documentacion. En el caso de seaborn, su documentacion es bastante extensa y llena de ejemplos. Asi que cuando quieras buscar como hacer una nueva grafica o mejorar alguna existente te invito a buscar en la documentacion.

## Box-Plot:
seaborn: 
https://seaborn.pydata.org/generated/seaborn.boxplot.html

Teoria:
https://es.wikipedia.org/wiki/Diagrama_de_caja

Teoria de Rango Intercuartil:
https://es.wikipedia.org/wiki/Rango_intercuart%C3%ADlico

El siguiente diagrama explica como entender un Boxplot. El diagrama de caja es compuesto de los siguientes elementos:

    Rango (sin datos atípicos)
    Datos atípicos.
    Rango intercuartil (también conocido como RIC)
    Cuartiles (denotados como Q1, Q2 y Q3)
    Mediana (Q2)
    Mínimo y máximo.

    Rango intercuartil (también conocido como RIC): Se define como la diferencia
    entre el tercer cuartil (Q3) y el primer cuartil (Q1), es decir: RQ = Q3 - Q1.

![alt text](https://upload.wikimedia.org/wikipedia/commons/4/4a/Diagrama_de_caja.jpg)

### Utilidad de los Boxplots
  
Proporcionan una visión general de la simetría de la distribución de los datos; si la mediana no está en el centro del rectángulo, la distribución no es simétrica.
Son útiles para ver la presencia de valores atípicos también llamados outliers.
Pertenece a las herramientas de las estadística descriptiva. Permite ver como es la dispersión de los puntos con la mediana, los percentiles 25 y 75 y los valores máximos y mínimos.
Ponen en una sola dimensión los datos de un histograma, facilitando así el análisis de la información al detectar que el 50% de la población está en los límites de la caja.
"""

# Importemos los datos de propinas que vienen la paqueteria de seaborn
tips = sns.load_dataset("tips")
tips.head(5)

"""Si queremos darnos una idea de como se comportan la variable de gasto por ticket (total_bill), podemos hacer uso de un Boxplot."""

# Histograma de tickets
ax = sns.boxplot(x=tips["total_bill"])

# Histograma de ticket por dia
ax = sns.boxplot(x="day", y="total_bill", data=tips)

"""## Histogramas:
seaborn: 
https://seaborn.pydata.org/generated/seaborn.distplot.html

Teoria:
https://es.wikipedia.org/wiki/Histograma

En estadística, un histograma es una representación gráfica de una variable en forma de barras, donde la superficie de cada barra es proporcional a la frecuencia de los valores representados. En todos los histogramas, cuando se agrupan los datos en intervalos desiguales hay que atender a la superficie de las barras, que no se corresponderá con la altura como ocurría en los casos anteriores.

### Utilidad de Histogramas:
Se utilizan para relacionar variables cuantitativas continuas. Para variables cuantitativas discretas las barras se dibujan separadas y el gráfico se llama diagrama de frecuencias, porque la variable representada en el eje horizontal ya no representa un espectro continuo de valores, sino valores cuantitativos específicos, igual que ocurre en un diagrama de barras, usado para representar una característica cualitativa o categórica.
Sirven para obtener una "primera vista" general, o panorama, de la distribución de la población, o de la muestra, respecto a una característica, cuantitativa y continua (como la longitud o el peso).
"""

# Crear un histograma de la distribucion de los tickets en seaborn
x = pd.Series(tips["total_bill"], name="total_bill")
ax = sns.distplot(x)



"""## Grafica de Dispersion:
seaborn: 
https://seaborn.pydata.org/generated/seaborn.scatterplot.html

Teoria:
https://es.wikipedia.org/wiki/Diagrama_de_dispersi%C3%B3n

Una grafica de dispersion o diagrama de dispersion de dispersión o gráfica de dispersión o gráfico de burbujas es un tipo de diagrama matemático que utiliza las coordenadas cartesianas para mostrar los valores de dos variables para un conjunto de datos.

### Utilidad de la grafica de dispersion:
Cualquier variable se puede representar en cada eje y el diagrama de dispersión mostrará el grado de correlación (no necesariamente causalidad) entre las dos variables. Uno de los aspectos más poderosos de un gráfico de dispersión, sin embargo, es su capacidad para mostrar las relaciones no lineales entre las variables. Es considerado una de las herramientas básicas de control de calidad.
"""

# Diagrama de Dispersion de tickets
'''
Hue parameter: Grouping variable that will produce points with different colors. 
Can be either categorical or numeric, although color mapping will behave 
differently in latter case.

La variable que reciba el argumento de hue, dictamina el color que tomara la
observacion. En este caso hue separa los datos en dinner y lunch.
'''

ax = sns.scatterplot(x="total_bill", y="tip",
                     hue="time",  data=tips)

"""## Grafica de Barras:
seaborn: 
https://seaborn.pydata.org/generated/seaborn.barplot.html

Teoria:
https://es.wikipedia.org/wiki/Diagrama_de_barras

Es una forma de representar gráficamente un conjunto de datos o valores, y está conformado por barras rectangulares de longitudes proporcionales a los valores representados Existen evidencias del uso de este tipo de diagramas desde hace más de 300 años.

### Utilidad de la grafica de Barras:
son usados para comparar cantidades de valores en diferentes momentos, o también podría decirse productos. Las barras pueden orientarse horizontal y verticalmente.

### Grafica de Barras en Seaborn

En el caso de seaborn las graficas de barras representan el valor estimado de la media para la variable del eje y (en nuestro ejemplo total bill), para cada categoria denotada en el eje x (day).

Las barras de error son calculadas asumiendo normalidad de las variables al 95 % de confianza.
"""

# Grafica de barras para ilustrar
'''
De acuerdo a la documentacion de seaborn el parametro CI representa:
Size of confidence intervals to draw around estimated values.

Esto quiere decir que basta si se desea cambiar el valor de confianza
de los intervalos a un valor a, basta con modificar este parametro
con ci=a .
'''
ax = sns.barplot(x="day", y="total_bill", data=tips, ci=95)

"""## Grafica de Lineas:
seaborn: 
https://seaborn.pydata.org/generated/seaborn.lineplot.html

Teoria:
https://en.wikipedia.org/wiki/Line_chart

La grafica de lineas o diagrama de lineas es un tipo de grafico que representan la informacion como una serie de puntos llamados 'markers' (marcadores) que se conectan por segmentos de lineal. El orden por el que se conectan esta dado por el eje x. Se puede visualizar como un grafica dispersion donde ademas existe una serie de segmentos de linea que conecta a los puntos en el orden indicado por el eje x.

### Utilidad de la grafica de lineas:
Generalmente se utilizan en las cienncias exactas, para visualizar valores exactos, pero son deficientes en el analisis de corrolaciones.
"""

# Importar datos fmri
'''
Este set de datos contiene observaciones de la senal obtenida al escanear la 
corteza cerebral de varios individuos. Si deseas indagar mas sobre el tema:
https://academic.oup.com/cercor/article/27/2/1270/3056315?keytype=ref&ijkey=5hjFprzQ7miiYZ4
'''
fmri = sns.load_dataset("fmri")
fmri

"""Al igual que la grafica de barras, el lineplot de seaborn
muestra grafica la media de la variable, y muestra un intervalo de confianza al 95% asumiendo normalidad, que esta representado por la banda de color claro que cubre a la linea de tono mas fuerte.
"""

# Lineplot de seaborn
'''
En esta grafica analizamos la intensidad de las senales de la corteza cerebral 
a travez de une scaner, en precencia de dos tipos de eventos. Uno es el estimulo
(stim) y el otro senal (cue). Estas estan diferenciadas por el argumento hue.
'''
ax = sns.lineplot(x="timepoint", y="signal", hue="event",
                  data=fmri)

"""## Time series:
seaborn: 
https://seaborn.pydata.org/generated/seaborn.lineplot.html

Teoria:
https://en.wikipedia.org/wiki/Line_chart

Puedes notar que las series de tiempo son un caso especial de lineplos, donde el eje x es el tiempo. Este tipo de graficas reciven un trato especial, pues el tiempo es una variable ampliamente utilizada en todo tipo de analisis, ademas de ser un componente escencial que determina el algoritmo que se puede utilizar, y mas propiedades estadisticas como autocorrelacion.

### Tips seaborn

Aumenta el tamano de tu grafica con el siguiente snippet al inicio de tu celda:
### plt.figure(figsize=(largo,ancho))
"""

# Aumenta el tamano de tu grafica con el siguiente snippet al inicio de tu celda:
# plt.figure(figsize=(largo,ancho))
plt.figure(figsize=(16,6))
ax = sns.lineplot(x="timepoint", y="signal", hue="event",
                  data=fmri)

plt.figure(figsize=(11,10))
ax = sns.lineplot(x="timepoint", y="signal", hue="event",
                  data=fmri)

"""El siguiente snippet modifica el tamano de todas las graficas en el notebook Funciona de manera similar al comando anterior.
#### plt.rcParams['figure.figsize'] = [largo, ancho]
"""

# El siguiente snippet modifica el tamano de todas las graficas en el notebook
# Funciona de manera similar plt.rcParams['figure.figsize'] = [largo, ancho]
plt.rcParams['figure.figsize'] = [16, 5]

ax = sns.lineplot(x="timepoint", y="signal", hue="event",
                  data=fmri)

"""## Tarea Parte 2

Imagina que la prestigiosa cadena de cines Megalopolis contrata a ti y a tu equipo para que les ayuden a predecir las ventas en taquilla. Antes de comenzar el proyecto te pasan una muestra de sus datos de venta agregados. Es conveniente evaluarlos para medir la viabilidad del proyecto y darse una idea de lo que esta pasando.

En una primera fase te pasan los datos de dulceria. Tu primera tarea es evaluar si la calidad de datos es la correcta:
+ Que los datos sean del tipo correcto (.info)
+ Revisa que las variables tengan sentido (.describe)
+ Los datos esten completos (grafica los datos)
"""



# Aumentemos el tamano de las graficas
plt.rcParams['figure.figsize'] = [16, 6]

"""La base de datos se carga automaticamente desde github. Si lo prefieres, puedes sustituir el paso que sigue con la lectura manual de los datos. Si estas en colab puedes leer archivos desde tu drive con el siguiente snippet.   

1 Te pedira que des click en un link  
2 Confirma el acceso a tu cuenta de drive  
3 Copia y pega el 'authorization code'  
4 Tu notebook de Colab ya puede leer archivos desde tu drive como si estuvieras en tu computadora.
"""

# from google.colab import drive
# drive.mount("/drive")
# path = '/drive/My Drive/path_en_drive/megalopolis.csv'
# cines = pd.read_csv(path)
# cines.head()

# Cargamos la base de datos
url = 'https://raw.githubusercontent.com/uumami/iexe_data/master/megalopolis.csv'
cines = pd.read_csv(url)
cines.head()

# Revisa que las variables sean del tipo correcto, te recomendamos usar el
# metodo df.info() sobre el data frame
.info()

# Revisa que los las variables tengan sentido, por ejemplo si hay ventas negativ
# as seria conveniente preguntar si son devoluciones o errores de medicion. Te 
# recomendamos usar df.describe()
.describe()

"""## Preguntas de Tarea:
### 1 La representacion o codificacion de los datos es coherente?
### 2 Existen años que presenten falta de datos?  
### 3 Existen anos que presenten anomalias?
### 4 Sugeririas revisar el proceso de extraccion de datos?

Grafica los datos para asegurarte que estan completos!!! Si tienes duda de como hacerlo revisa los ejemplos anterirores o revisa la documentacion de seaborn. Recuerda que usamos para series de tiempo.
"""

### TODO: Analiza la serie de tiempo de datos agregados



cines.columns

"""Fuentes: Las imagenes y descripciones fueron obtenidas de wikipedia, completadas, corregidas, y aumentadas por IEXE para adaptarlas a tus requerimeintos. El codigo esta basado en la documentacion de Seaborn."""