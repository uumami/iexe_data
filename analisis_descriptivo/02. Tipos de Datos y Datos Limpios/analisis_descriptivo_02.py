# -*- coding: utf-8 -*-
"""analisis_descriptivo_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u7ZBDVobYK2uDMXmS90dT5ZdlFvBLjTh
"""

# Importamos las librerias correspondientes
import pandas as pd
import numpy as np

"""# Ejemplo de Tipos de Datos usado en Clase:"""

# Creamps un pandas o dataframe
sabor = ['naranja', 'naranja', 'naranja', 'limon', 'limon', 'manzana']
precio = [15, 20, 15, 10, 15, 15]
tamano = ['individual', 'familiar', 'individual', 'individual', 'familiar', 'individual']
df = pd.DataFrame.from_dict({'sabor':sabor, 'tamano':tamano, 'precio':precio})
df

# Creamos dos tipos de encoding
encoding_1 = {'naranja':1, 'limon':2, 'manzana':3}
encoding_2 = {'naranja':1000, 'limon':2, 'manzana':-503}

# replace es un metodo que puede recibir un diccionario con las codificaciones a realizar
df['sabor_1'] = df['sabor'].replace(encoding_1)
df['sabor_2'] = df['sabor'].replace(encoding_2)
df

# Medias con diferentes encodings
print('Media con Primer Encoding: ' , df['sabor_1'].mean())
print('Media con Segundo Encoding: ' , df['sabor_2'].mean())

# La frecuencia se mantiene constante
print(df.groupby(['sabor'])['sabor_1', 'sabor_2'].count())

# Creamos dos tipos de encoding para variables ordinales
encoding_1 = {'individual':0, 'familiar':1}
encoding_2 = {'individual':-1, 'familiar':-2}

# replace es un metodo que puede recibir un diccionario con las codificaciones a realizar
df['tamano_1'] = df['tamano'].replace(encoding_1)
df['tamano_2'] = df['tamano'].replace(encoding_2)
df[['sabor', 'tamano', 'precio', 'tamano_1', 'tamano_2']]

# Medias con diferentes encodings para tamano
print('Media con Primer Encoding: ' , df['tamano_1'].mean())
print('Media con Segundo Encoding: ' , df['tamano_2'].mean())

# La frecuencia se mantiene constante
print(df.groupby(['tamano'])['tamano_1', 'tamano_2'].count())

"""# Tarea: Cual de los siguientes encodings son validos?

Para la variable sabor hay dos encodings a y b
"""

# Creamos dos tipos de encoding
encoding_a = {'naranja':1, 'limon':1000, 'manzana':300}
encoding_b = {'naranja':1000, 'limon':1, 'manzana':1}

# replace es un metodo que puede recibir un diccionario con las codificaciones a realizar
df['sabor_a'] = df['sabor'].replace(encoding_a)
df['sabor_b'] = df['sabor'].replace(encoding_b)
df[['sabor', 'sabor_a', 'sabor_b']]

"""Para la variable tamano hay dos encodings x & y"""

# Creamos dos tipos de encoding para variables ordinales
encoding_x = {'individual':-10, 'familiar':10}
encoding_y = {'individual':-50, 'familiar':100}

# replace es un metodo que puede recibir un diccionario con las codificaciones a realizar
df['tamano_x'] = df['tamano'].replace(encoding_x)
df['tamano_y'] = df['tamano'].replace(encoding_y)
df[['tamano', 'tamano_x', 'tamano_y']]

"""# Ejemplo de Tidy Data usado enClase:"""

# Estructura 1
nombre = ['Fernando', 'Alfonso', 'Santiago', 'Lili', 'Rosalia']
tratamiento_a = [25, 5, 6, 89, 10]
tratamiento_b = [0, 17, 15, 7, 9]

data_dict_1 = {
    'paciente':nombre,
    'tratamiento_a':tratamiento_a,
    'tratamiento_b': tratamiento_b
}

df_1 = pd.DataFrame.from_dict(data_dict_1)

df_1.head()

# Estructura 2
tratamiento= ['tratamiento_a', 'tratamiento_b']
fernando = [25,0]
alfonso = [5,17]
santiago = [6,15]
lili = [89, 7]
rosalia = [10,9]

data_dict_2 = {
    'tratamiento':tratamiento,
    'Fernando':fernando,
    'Alfonso': alfonso,
    'Santiago':santiago,
    'Lili': lili,
    'Rosalia':rosalia
}

df_2 = pd.DataFrame.from_dict(data_dict_2)
df_2.head()

# Estructura 3 (datos tidy)
'''
Si no estas familiarizado con la funcion melt de pandas te invito a jugar un poco
con ella para enterla bien y consultar su documentacion.
'''
df_3 = pd.melt(df_1, id_vars=['paciente'], value_vars=['tratamiento_a', 
                                                       'tratamiento_b'])
df_3.rename(columns={'variable':'tratamiento', 'value':'resultado'}, 
            inplace=True)
df_3

"""# Tarea

### La clinica del ejemplo anterior te contacta de nuevo con una nueva serie de datos. Esta vez para manetener el anonimato los nombres son cambiados para por ids numericos que representan a un paciente unico. Cada paciente pudo haber recibido los tratamientos varias veces. En caso de tener el valor de -1 en tratamiento_a o tratamiento_b implica que el tratamiento no se realizo.
"""

# Generamos los nuevos datos
np.random.seed(100)
n = 1000
id_paciente = np.random.randint(1000, size=n) 
tratamiento_a = np.random.randint(low=10, high=100, size=n) 
tratamiento_b = np.random.randint(low=15, high=90, size=n) 


data_dict_pacientes = {
    'paciente':id_paciente,
    'tratamiento_a':tratamiento_a,
    'tratamiento_b': tratamiento_b
}

df_pacientes = pd.DataFrame.from_dict(data_dict_pacientes)
df_pacientes['tratamiento_a'] = df_pacientes['tratamiento_a'].apply(
    lambda x: x if x>15 else -1)
df_pacientes['tratamiento_b'] = df_pacientes['tratamiento_b'].apply(
    lambda x: -1 if x>80 else x) 

df_pacientes.head()

"""### Realiza los siguientes ejercicios y responde las siguientes preguntas con los datos de df_pacientes.

1.- Pon en formato tidy la tabla "df_pacientes".  

2.- Elimina aquellas observaciones de tratamientos no realizados, es decir tratamientos con valor de -1.
"""

# Transforma la tabla df_pacientes a formato tidy y elimina los tratamientos 
#con resultado -1, si tienes dudas revisa el ejemplo anterior.

df_pacientes.head()

"""##### 1 Cuantos pacientes recibieron el tratamiento a y b por lo menos una vez?"""

# Respuesta 1

"""##### 2 Cuantos pacientes recibieron el tratamiento "A" 3 o mas veces?"""

# Respuesta 2

"""##### 3 Cuales son las dimensiones de los datos en formato tidy, despues de limpiar los -1? Puedes ver el resultado con el atributo .shape"""

#.shape